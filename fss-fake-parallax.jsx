(function(thisObj){// basic panelfss_fake_paralllax(this); function fss_fake_paralllax(thisObj){// this is globalparallax_data =  {    "expr":[    "source_X = thisComp.layer(\"PARALLAX CONTROL\").transform.position[0];",    "source_Y = thisComp.layer(\"PARALLAX CONTROL\").transform.position[1];",    "distance = effect(\"dist\")(\"ADBE Slider Control-0001\");",    "target_X = source_X;",    "try {target_X = source_X / effect(\"dist\")(\"ADBE Slider Control-0001\");}catch(e){}",    "target_Y = transform.position[1];",    "[target_X,target_Y]"    ]};///   THIS WILL CHECK IF PANEL IS DOCKABLE OR FLAOTING WINDOW  var win   = buildUI(thisObj );if ((win !== null) && (win instanceof Window)) {    win.center();    win.show();} // end if win  null and not a instance of window  function buildUI (thisObj  ) {        var H = 25; // the height        var W = 30; // the width        var G = 5; // the gutter        var x = G;        var y = G;        var rows = 1;        var colums = 3;    var win = (thisObj instanceof Panel) ? thisObj :  new Window('palette', 'FSS Fake Parallax',[0,0,G*2+W*colums,G*2+H*rows],{resizeable: true});    if (win !== null) {        // win.check_box = win.add('checkbox',[x,y,x+W*2,y + H],'check');        // win.check_box.value = metaObject.setting1;        win.do_it_button = win.add('button', [x ,y,x+W*3,y + H], 'do it');        // win.up_button = win.add('button', [x + W*5+ G,y,x + W*6,y + H], 'Up');         // win.check_box.onClick = function (){        //     alert("check");        // };        win.do_it_button.onClick = function () {            parallax();      };    }    return win;}function parallax(){// "in function main. From here on it is a straight run"//     var curComp = app.project.activeItem;   if (!curComp || !(curComp instanceof CompItem)){        alert('please select a comp');        return;    }    if(curComp.selectedLayers.length < 1){        alert('Please select at least one layer');    return;        }    app.beginUndoGroup('FSS Parallax');    var parallax_ctrl_exists = false;    if(curComp.selectedLayers.length < 1){        alert("Please select at least one layer");        return;    }    for (var i = 1; i < curComp.layers.length; i++) {        var layer = curComp.layers[i];        if(layer.name === "PARALLAX CONTROL"){            parallax_ctrl_exists = true;        }    }var layers = [];    for (var k = 0; k < curComp.selectedLayers.length; k++) {        layers.push(curComp.selectedLayers[k]);        }    if(!parallax_ctrl_exists){        var ctrl = curComp.layers.addNull();        ctrl.name = "PARALLAX CONTROL";    }    for (var j = 0; j < layers.length; j++) {        var sel_layer = layers[j];        var eff = null;        eff = getEffect(sel_layer,"dist","ADBE Slider Control");        if(eff === null){                var dist_slider = sel_layer("ADBE Effect Parade").addProperty("ADBE Slider Control");                dist_slider.name = "dist";                dist_slider("ADBE Slider Control-0001").setValue(1);            }        sel_layer.transform.position.expression = parallax_data.expr.join("\n");    }       app.endUndoGroup();}/** * This functions looks for an effect by name and matchname and returns it. * Thanks to Kevin Schires (the author of Elementary) for helping me with that * http://aescripts.com/authors/f-l/kevin-schires/ *  * @param  {Layer Object} layer The layer to check * @param  {String} name      The name off the effect * @param  {String} matchName The matchname of the effects * @return {Effect}           returns the effect for later usage */function getEffect(layer, effectName, matchName){var effectGroup = layer.property("ADBE Effect Parade");var effect = effectGroup(effectName);if ( effect && effect.matchName != matchName ){effect.name += " *";effect = null;}if ( !effect && effectGroup.canAddProperty(matchName) ){effect = effectGroup.addProperty(matchName);effect.name = effectName;}return effect;} }// close fss_fake_paralllax})(this);